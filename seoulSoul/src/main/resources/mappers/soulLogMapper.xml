<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="soulLogMapper">

	<resultMap type="com.multi.seoulsoul.soulLog.model.dto.SoulLogDTO" id="soulLogResultMap">
			
		<!-- DB PK 컬럼 -->
		<id property="soulLogNo" column="soul_log_no"/>
		
		<!-- DB 일반 컬럼 -->
		<result property="title" column="title"/>
		<result property="content" column="content"/>
		<result property="views" column="views"/>
		<result property="createdDate" column="created_date"/>
		<result property="modifiedDate" column="modified_date"/>
		<result property="likesCount" column="likes_count"/>
		<result property="repliesCount" column="replies_count"/>
		<result property="viewerLike" column="viewer_like"/>
		
		<!-- 1 대 1 관계 -->
		<association property="location" resultMap="locationResultMap"/>
		<association property="category" resultMap="categoryResultMap"/>
		<association property="writer" resultMap="writerResultMap"/>
		
		<!-- 1 대 다 관계 -->
		<collection property="files" resultMap="filesResultMap"/>
		<collection property="likes" resultMap="likesResultMap"/>
		<collection property="replies" resultMap="repliesResultMap"/>
		
	</resultMap>
		
	<resultMap type="com.multi.seoulsoul.soulLog.model.dto.LocationDTO" id="locationResultMap">

		<id property="locationCode" column="location_code"/>
		<result property="locationName" column="location_name"/>
		
	</resultMap>
		
	<resultMap type="com.multi.seoulsoul.soulLog.model.dto.CategoryDTO" id="categoryResultMap">

		<id property="categoryCode" column="category_code"/>
		<result property="categoryName" column="category_name"/>
		
	</resultMap>
		
	<resultMap type="com.multi.seoulsoul.soulLog.model.dto.WriterDTO" id="writerResultMap">

		<id property="userNo" column="writer"/>
		<result property="nickname" column="nickname"/>
		
	</resultMap>
		
	<resultMap type="com.multi.seoulsoul.soulLog.model.dto.FilesDTO" id="filesResultMap">
		
		<id property="fileNo" column="file_no"/>
		<result property="soulLogNo" column="file_soul_log_no"/>
		<result property="originalName" column="original_name"/>
		<result property="savedName" column="saved_name"/>
		    
	</resultMap>
		
	<resultMap type="com.multi.seoulsoul.soulLog.model.dto.LikesDTO" id="likesResultMap">
		
		<id property="userNo" column="like_user_no"/>
		<id property="soulLogNo" column="like_soul_log_no"/>
		<result property="likedDate" column="liked_date"/>
		    
	</resultMap>
	
	<resultMap type="com.multi.seoulsoul.soulLog.model.dto.RepliesDTO" id="repliesResultMap">
		
		<id property="replyNo" column="reply_no"/>
		<result property="soulLogNo" column="reply_soul_log_no"/>
		<result property="content" column="reply_content"/>
		<result property="createdDate" column="reply_created_date"/>
		<result property="modifiedDate" column="reply_modified_date"/>
		
		<association property="writer" resultMap="replyWriterResultMap"/>
		    
	</resultMap>
	
	<resultMap type="com.multi.seoulsoul.soulLog.model.dto.ReplyWriterDTO" id="replyWriterResultMap">

		<id property="userNo" column="reply_writer"/>
		<result property="nickname" column="reply_nickname"/>
		
	</resultMap>
	
	<resultMap type="com.multi.seoulsoul.soulLog.model.dto.StatsDTO" id="statsResultMap">
		
		<result property="locationCode" column="location_code"/>
		<result property="locationName" column="location_name"/>
		<result property="soulLogNo" column="soul_log_no"/>
		<result property="likeCount" column="like_count"/>
		<result property="replyCount" column="reply_count"/>
		
	</resultMap>

	
	<select id="selectSoulLogCount" resultType="Integer" parameterType="com.multi.seoulsoul.soulLog.model.dto.FilterDTO">
		SELECT COUNT(*) soulLogCount FROM SL_BOARD
		<where>
   				<if test="locationCode != 0">
   					location_code = #{ locationCode }
   				</if>
   				<if test="categoryCode != 0">
   					AND category_code = #{ categoryCode }
   				</if>
   				<if test="searchWord != null and searchWord != ''">
   					AND title LIKE CONCAT('%', #{ searchWord }, '%')
   				</if>
   			</where>
	</select>
	

	<select id="selectSoulLogList" resultMap="soulLogResultMap" parameterType="com.multi.seoulsoul.soulLog.model.dto.FilterDTO">
		SELECT
			A.soul_log_no, 
			A.title, 
			A.views, 
			B.location_name, 
			C.category_name, 
			(SELECT COUNT(*) FROM SL_LIKE D WHERE D.soul_log_no = A.soul_log_no) AS likes_count, 
			(SELECT COUNT(*) FROM SL_REPLY E WHERE E.soul_log_no = A.soul_log_no) AS replies_count, 
			(SELECT F.saved_name FROM SL_FILES F WHERE F.soul_log_no = A.soul_log_no ORDER BY F.file_no LIMIT 1) AS saved_name 
			FROM SL_BOARD A 
			LEFT JOIN LOCATION B ON A.location_code = B.location_code 
			LEFT JOIN SL_CATEGORY C ON A.category_code = C.category_code
			<where>
   				<if test="locationCode != 0">
   					A.location_code = #{ locationCode }
   				</if>
   				<if test="categoryCode != 0">
   					AND A.category_code = #{ categoryCode }
   				</if>
   				<if test="searchWord != null and searchWord != ''">
   					AND A.title LIKE CONCAT('%', #{ searchWord }, '%')
   				</if>
   			</where> 
			ORDER BY A.soul_log_no DESC 
   			LIMIT #{startIndex}, #{pageCount}
	</select>
	
	
	<select id="selectLocationList" resultMap="locationResultMap">
		SELECT
			A.location_code, 
			A.location_name
		FROM LOCATION A
		ORDER BY A.location_code ASC
	</select>
	
	
	<select id="selectCategoryList" resultMap="categoryResultMap">
		SELECT
			A.category_code, 
			A.category_name
		FROM SL_CATEGORY A
		ORDER BY A.category_code ASC
	</select>
	
	
	<insert id="insertSoulLog" parameterType="com.multi.seoulsoul.soulLog.model.dto.SoulLogDTO" useGeneratedKeys="true" keyProperty="soulLogNo">
        INSERT INTO SL_BOARD
        	(location_code, category_code, title, content, writer) 
        VALUES
	        (
	        #{ location.locationCode }, 
	        #{ category.categoryCode }, 
	        #{ title }, 
	        #{ content }, 
	        #{ writer.userNo }
	        )
	</insert>
	
	
	<insert id="insertSoulLogFile" parameterType="com.multi.seoulsoul.soulLog.model.dto.FilesDTO">
        INSERT INTO SL_FILES
        	(soul_log_no, original_name, saved_name) 
        VALUES
	        (
	        #{ soulLogNo }, 
	        #{ originalName }, 
	        #{ savedName }
	        )
	</insert>
	
	
	<select id="soulLogDetail" resultMap="soulLogResultMap" parameterType="com.multi.seoulsoul.soulLog.model.dto.DetailRequestDTO">
		SELECT
			A.soul_log_no, 
			A.location_code, 
			A.category_code, 
			A.title, 
			A.content, 
			A.writer, 
			(SELECT nickname FROM USERS G WHERE A.writer = G.user_no) AS nickname, 
			A.views, 
			A.created_date,
			B.location_name, 
			C.category_name, 
			E.reply_no, 
			E.soul_log_no AS reply_soul_log_no, 
			E.content AS reply_content, 
			E.writer AS reply_writer, 
			E.created_date AS reply_created_date, 
			(SELECT nickname FROM USERS G WHERE E.writer = G.user_no) AS reply_nickname, 
			(SELECT COUNT(*) FROM SL_LIKE D WHERE D.soul_log_no = A.soul_log_no) AS likes_count, 
			(SELECT COUNT(*) FROM SL_LIKE D WHERE D.soul_log_no = A.soul_log_no AND D.user_no = #{ loginUserNo }) AS viewer_like, 
			(SELECT COUNT(*) FROM SL_REPLY E WHERE E.soul_log_no = A.soul_log_no) AS replies_count, 
			F.file_no,
			F.soul_log_no AS file_soul_log_no, 
			F.original_name,  
			F.saved_name
			FROM SL_BOARD A 
			LEFT JOIN LOCATION B ON A.location_code = B.location_code 
			LEFT JOIN SL_CATEGORY C ON A.category_code = C.category_code 
			LEFT JOIN SL_REPLY E ON A.soul_log_no = E.soul_log_no
			LEFT JOIN SL_FILES F ON A.soul_log_no = F.soul_log_no
			WHERE A.soul_log_no = #{ soulLogNo }
	</select>
	
	
	<update id="addViews" parameterType="int">
		UPDATE SL_BOARD
		SET views = views+1
		WHERE soul_log_no = #{ soulLogNo }
	</update>
	
	
	<insert id="insertSoulLogReply" parameterType="com.multi.seoulsoul.soulLog.model.dto.RepliesDTO">
        INSERT INTO SL_REPLY
        	(soul_log_no, content, writer) 
        VALUES
	        (
	        #{ soulLogNo }, 
	        #{ content }, 
	        #{ writer.userNo }
	        )
	</insert>
	
	
	<delete id="deleteSoulLog" parameterType="com.multi.seoulsoul.soulLog.model.dto.SoulLogDTO">
		DELETE FROM SL_BOARD
		WHERE soul_log_no = #{ soulLogNo }
		<if test="writer.userNo != 1">
   			AND writer = #{ writer.userNo }
   		</if>
	</delete>
	
	
	<delete id="deleteSoulLogReply" parameterType="com.multi.seoulsoul.soulLog.model.dto.RepliesDTO">
		DELETE FROM SL_REPLY
		WHERE reply_no = #{ replyNo }
		<if test="writer.userNo != 1">
   			AND writer = #{ writer.userNo }
   		</if>
	</delete>
	
	
	<select id="updateDetail" resultMap="soulLogResultMap" parameterType="int">
		SELECT
			A.soul_log_no, 
			A.location_code, 
			A.category_code, 
			A.title, 
			A.content, 
			A.writer, 
			(SELECT nickname FROM USERS G WHERE A.writer = G.user_no) AS nickname, 
			A.views, 
			A.created_date,
			B.location_name, 
			C.category_name, 
			E.reply_no, 
			E.soul_log_no AS reply_soul_log_no, 
			E.content AS reply_content, 
			E.writer AS reply_writer, 
			E.created_date AS reply_created_date, 
			(SELECT nickname FROM USERS G WHERE E.writer = G.user_no) AS reply_nickname, 
			(SELECT COUNT(*) FROM SL_LIKE D WHERE D.soul_log_no = A.soul_log_no) AS likes_count, 
			(SELECT COUNT(*) FROM SL_REPLY E WHERE E.soul_log_no = A.soul_log_no) AS replies_count, 
			F.file_no,
			F.soul_log_no AS file_soul_log_no, 
			F.original_name,  
			F.saved_name
			FROM SL_BOARD A 
			LEFT JOIN LOCATION B ON A.location_code = B.location_code 
			LEFT JOIN SL_CATEGORY C ON A.category_code = C.category_code 
			LEFT JOIN SL_REPLY E ON A.soul_log_no = E.soul_log_no
			LEFT JOIN SL_FILES F ON A.soul_log_no = F.soul_log_no
			WHERE A.soul_log_no = #{ soulLogNo }
	</select>
	
	
	<update id="updateSoulLog" parameterType="com.multi.seoulsoul.soulLog.model.dto.SoulLogDTO">
		UPDATE SL_BOARD
		SET title = #{ title }, 
			location_code = #{ location.locationCode }, 
			category_code = #{ category.categoryCode }, 
			content = #{ content },
			modified_date = NOW()
		WHERE soul_log_no = #{ soulLogNo } AND writer = #{ writer.userNo }
	</update>
	
	
	<update id="updateImage" parameterType="com.multi.seoulsoul.soulLog.model.dto.FilesDTO">
		UPDATE SL_FILES
		SET original_name = #{ originalName }, 
			saved_name = #{ savedName }
		WHERE file_no = #{ fileNo }
	</update>
	
	
	<delete id="deleteImage" parameterType="int">
		DELETE FROM SL_FILES
		WHERE file_no = #{ fileNo }
	</delete>
	
	
	<insert id="insertImage" parameterType="com.multi.seoulsoul.soulLog.model.dto.FilesDTO">
		INSERT INTO SL_FILES
			(soul_log_no, original_name, saved_name)
		VALUES
			(
			#{ soulLogNo }, 
			#{ originalName }, 
			#{ savedName }
			)
	</insert>
	
	
	<update id="updateSoulLogReply" parameterType="com.multi.seoulsoul.soulLog.model.dto.RepliesDTO">
		UPDATE SL_REPLY
		SET content = #{ content }
		WHERE reply_no = #{ replyNo } AND writer = #{ writer.userNo }
	</update>
	
	
	<insert id="insertLike" parameterType="com.multi.seoulsoul.soulLog.model.dto.LikesDTO">
		INSERT INTO SL_LIKE
			(user_no, soul_log_no)
		VALUES
			(
			#{ userNo },
			#{ soulLogNo }
			)
	</insert>
	
	
	<delete id="deleteLike" parameterType="com.multi.seoulsoul.soulLog.model.dto.LikesDTO">
		DELETE FROM SL_LIKE
		WHERE user_no = #{ userNo } AND soul_log_no = #{ soulLogNo }
	</delete>
	
	
	<select id="selectStats" resultMap="statsResultMap">
		SELECT 
			A.location_code, 
			COUNT(DISTINCT A.soul_log_no) AS soul_log_count,
			SUM(IF(user_no IS NOT NULL, 1, 0)) AS like_count,
			SUM(IF(reply_no IS NOT NULL, 1, 0)) AS reply_count, 
			D.location_name
		FROM SL_BOARD A
		LEFT JOIN SL_LIKE B ON A.soul_log_no = B.soul_log_no
		LEFT JOIN SL_REPLY C ON A.soul_log_no = C.soul_log_no
		LEFT JOIN LOCATION D ON A.location_code = D.location_code
		WHERE A.writer = #{ userNo }
		GROUP BY A.location_code
	</select>

	

</mapper>
